AWSTemplateFormatVersion: "2010-09-09"
Description: "Create custom ECS-GPU Optimized AMI when formal AMI updated"

Parameters:
  ImageName:
    Type: String
    Default: custom-amzn2-ami-ecs-gpu-hvm-x86_64-ebs
    Description: The AMI name to be created.It will created with `ImageName`-<timestamp>.
  SourceAmiNameFilter:
    Type: String
    Default: amzn2-ami-ecs-gpu-hvm-*-x86_64-ebs
    Description: Source AMI name filter.
  CodeBuildProjectName:
    Type: String
    Default: packer-build-ecs-gpu-optimized-ami
  VpcId:
    Type: String
    Description: VPC ID that run CodeBuild project.
  SubnetId:
    Type: String
    Description: Subnet ID that run CodeBuild project. Private subnet only.
  SecurityGroupId:
    Type: String
    Description: Security ID that run CodeBuild project.
  PackerVersion:
    Type: String
    Description: Packer version.
    Default: 1.7.0
  Foo:
    Type: String
    Default: Bar

Resources:
  CodeBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Ref CodeBuildProjectName
      Source:
        BuildSpec: |
          version: 0.2

          phases:
            install:
              runtime-versions:
                python: 3.8
            pre_build:
              commands:
                - apt-get update && apt-get install -y unzip git
                - echo "Installing HashiCorp Packer..."
                - rm -rf packer* && curl -qL -o packer.zip https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip && unzip packer.zip
                - echo "Installing jq..."
                - rm -rf jq* && curl -qL -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && chmod +x ./jq
                - ./jq --version
                - echo "Downloading template..."
                - git clone --depth 1 https://github.com/ohsawa0515/ecs-gpu-optimized-ami-auto-update.git
                - mv ecs-gpu-optimized-ami-auto-update/packer_template.json ./
                - echo "Validating template..."
                - ./packer validate packer_template.json
            build:
              commands:
                - ./packer build packer_template.json | tee output.txt
                - ami_id=$(tail -2 output.txt | head -2 | awk 'match($0, /ami-.*/) { print substr($0, RSTART, RLENGTH) }')
                - if [ -z "${ami_id}" ]; then echo 'Faild to create AMI.'; exit 1; fi
                - echo "AMI ID ${ami_id}"
            post_build:
              commands:
                - if [ -z "${ami_id}" ]; then echo "Completed build by HashiCorp Packer."; fi

        GitCloneDepth: 1
        InsecureSsl: false
        Type: "NO_SOURCE"
      Artifacts:
        Type: "NO_ARTIFACTS"
      Cache:
        Type: "NO_CACHE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        EnvironmentVariables:
          - Name: "AWS_REGION"
            Type: "PLAINTEXT"
            Value: !Ref AWS::Region
          - Name: "VPC_ID"
            Type: "PLAINTEXT"
            Value: !Ref VpcId
          - Name: "SUBNET_ID"
            Type: "PLAINTEXT"
            Value: !Ref SubnetId
          - Name: "SECURITY_GROUP_ID"
            Type: "PLAINTEXT"
            Value: !Ref SecurityGroupId
          - Name: "PACKER_VERSION"
            Type: "PLAINTEXT"
            Value: !Ref PackerVersion
          - Name: "IMAGE_NAME"
            Type: "PLAINTEXT"
            Value: !Ref ImageName
          - Name: "SOURCE_AMI_NAME_FILTER"
            Type: "PLAINTEXT"
            Value: !Ref SourceAmiNameFilter
        Image: "aws/codebuild/standard:5.0"
        ImagePullCredentialsType: "CODEBUILD"
        PrivilegedMode: false
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      TimeoutInMinutes: "60"
      QueuedTimeoutInMinutes: 480
      EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
      VpcConfig:
        VpcId: !Ref VpcId
        Subnets:
          - !Ref SubnetId
        SecurityGroupIds:
          - !Ref SecurityGroupId
      BadgeEnabled: false
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
        S3Logs:
          Status: "DISABLED"
          EncryptionDisabled: false

  CodeBuildIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "codebuild-packer-build"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codebuild.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref CodeBuildIAMPolicy
        - !Ref PackerBuildIAMPolicy

  CodeBuildIAMPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "codebuild-packer-build"
      Path: "/service-role/"
      PolicyDocument: !Sub |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": [
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProjectName}",
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProjectName}:*"
                    ],
                    "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "codebuild:CreateReportGroup",
                        "codebuild:CreateReport",
                        "codebuild:UpdateReport",
                        "codebuild:BatchPutTestCases",
                        "codebuild:BatchPutCodeCoverages"
                    ],
                    "Resource": [
                        "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${CodeBuildProjectName}-*"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:CreateNetworkInterface",
                        "ec2:DescribeDhcpOptions",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DeleteNetworkInterface",
                        "ec2:DescribeSubnets",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeVpcs"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:CreateNetworkInterfacePermission"
                    ],
                    "Resource": "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*",
                    "Condition": {
                        "StringEquals": {
                            "ec2:Subnet": [
                                "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${SubnetId}"
                            ],
                            "ec2:AuthorizedService": "codebuild.amazonaws.com"
                        }
                    }
                }
            ]
        }

  PackerBuildIAMPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "packer_build_policy"
      Path: "/"
      # refer: https://www.packer.io/docs/builders/amazon#iam-task-or-instance-role
      PolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ec2:AttachVolume",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:CopyImage",
                "ec2:CreateImage",
                "ec2:CreateKeypair",
                "ec2:CreateSecurityGroup",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:CreateVolume",
                "ec2:DeleteKeyPair",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteSnapshot",
                "ec2:DeleteVolume",
                "ec2:DeregisterImage",
                "ec2:DescribeImageAttribute",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeRegions",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSnapshots",
                "ec2:DescribeSubnets",
                "ec2:DescribeTags",
                "ec2:DescribeVolumes",
                "ec2:DetachVolume",
                "ec2:GetPasswordData",
                "ec2:ModifyImageAttribute",
                "ec2:ModifyInstanceAttribute",
                "ec2:ModifySnapshotAttribute",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "ec2:StopInstances",
                "ec2:TerminateInstances"
              ],
              "Resource": "*"
            }
          ]
        }

  # EventBridge
  EventsRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: "update-custom-ecs-gpu-optimized-ami"
      EventPattern: |
        {
          "source": ["aws.ssm"],
          "detail-type": ["Parameter Store Change"],
          "detail": {
            "name": ["/aws/service/ecs/optimized-ami/amazon-linux-2/gpu/recommended/image_id"],
            "operation": ["Update"]
          }
        }
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt CodeBuild.Arn
          Id: update-custom-ecs-gpu-optimized-ami
          RoleArn: !GetAtt EventBridgeIAMRole.Arn
      EventBusName: "default"

  EventBridgeIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: "Amazon_EventBridge_Invoke_CodeBuild_Packer_Build"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"events.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref EventBridgeIAMPolicy

  EventBridgeIAMPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "Amazon_EventBridge_Invoke_CodeBuild_Packer_Build"
      Path: "/service-role/"
      PolicyDocument: !Sub |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "codebuild:StartBuild"
                    ],
                    "Resource": [
                        "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildProjectName}"
                    ]
                }
            ]
        }
